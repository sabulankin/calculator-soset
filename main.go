package main

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strconv"
	"strings"
	"unicode"
)

func main() {
	fmt.Println("–ù—É —Ö–µ–ª–ª–æ—É :) –≠—Ç–æ –º–æ—è –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, —Ö–æ—Ç—å –∏ –±–µ–∑ –≥–ø—Ç –Ω–∏–∫—É–¥–∞.")
	fmt.Println("–ö–∞–∫ —Ç—ã –º–æ–≥ —É–≤–∏–¥–µ—Ç—å, —Å—Ç—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –ø–∞–ø–∫–µ, –ø–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–≤–Ω—ã–π –∏–º")
	fmt.Println("–ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

	reader := bufio.NewReader(os.Stdin)
	history := []string{} // –∏—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π

	for {
		fmt.Print("calc> ")
		line, _ := reader.ReadString('\n')
		line = strings.TrimSpace(line)

		switch line {
		case "":
			fmt.Println("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å'.")
			continue
		case "–≤—ã—Ö–æ–¥":
			fmt.Println("–ü–æ–∫–∞!")
			return
		case "–ø–æ–º–æ—â—å":
			fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
			fmt.Println("  –ø–æ–º–æ—â—å   - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
			fmt.Println("  –≤—ã—Ö–æ–¥    - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
			fmt.Println("  –æ—á–∏—Å—Ç–∏—Ç—å - –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
			fmt.Println("  –∏—Å—Ç–æ—Ä–∏—è  - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
			fmt.Println("–ü—Ä–∏–º–µ—Ä—ã –≤—ã—Ä–∞–∂–µ–Ω–∏–π: 2+2, 100-48, -4/2+2")
			continue
		case "–æ—á–∏—Å—Ç–∏—Ç—å":
			clearScreen()
			continue
		case "–∏—Å—Ç–æ—Ä–∏—è":
			if len(history) == 0 {
				fmt.Println("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
			} else {
				fmt.Println("–ò—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:")
				for _, h := range history {
					fmt.Println("  " + h)
				}
			}
			continue
		}

		result, err := eval(line)
		if err != nil {
			fmt.Println("\033[31m–û—à–∏–±–∫–∞:", err, "\033[0m") // –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
			continue
		}

		fmt.Println("\033[32m–†–µ–∑—É–ª—å—Ç–∞—Ç:", result, "\033[0m") // –∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç
		history = append(history, fmt.Sprintf("%s = %v", line, result))

		// üéµ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
		if result == 52 {
			playMusic("52.mp3")
		} else if result == 4 {
			playMusic("4.mp3")
		} else if result == 0 {
			playMusic("0.mp3")
		}
	}
}

// ----------------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ -----------------

func eval(expr string) (float64, error) {
	tokens, err := tokenize(expr)
	if err != nil {
		return 0, err
	}

	rpn, err := shuntingYard(tokens)
	if err != nil {
		return 0, err
	}

	return evalRPN(rpn)
}

func tokenize(expr string) ([]string, error) {
	var tokens []string
	var number strings.Builder
	prev := "" // –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–∫–µ–Ω

	for i, ch := range expr {
		if !unicode.IsDigit(ch) && ch != '.' && ch != '+' && ch != '-' && ch != '*' && ch != '/' && ch != '(' && ch != ')' {
			return nil, fmt.Errorf("–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: %q", ch)
		}

		if unicode.IsDigit(ch) || ch == '.' {
			number.WriteRune(ch)
		} else {
			if number.Len() > 0 {
				tokens = append(tokens, number.String())
				number.Reset()
				prev = tokens[len(tokens)-1]
			}

			if strings.TrimSpace(string(ch)) == "" {
				continue
			}

			if ch == '-' {
				if i == 0 || prev == "" || prev == "(" || prev == "+" || prev == "-" || prev == "*" || prev == "/" {
					number.WriteRune(ch)
					continue
				}
			}

			tokens = append(tokens, string(ch))
			prev = string(ch)
		}
	}
	if number.Len() > 0 {
		tokens = append(tokens, number.String())
	}

	return tokens, nil
}

func shuntingYard(tokens []string) ([]string, error) {
	var output []string
	var stack []string
	precedence := map[string]int{"+": 1, "-": 1, "*": 2, "/": 2}

	for _, tok := range tokens {
		if (tok == "+" || tok == "-" || tok == "*" || tok == "/") &&
			(len(output) == 0 && (len(stack) == 0 || stack[len(stack)-1] == "(")) {
			return nil, fmt.Errorf("–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ %s", tok)
		}

		if isNumber(tok) {
			output = append(output, tok)
		} else if tok == "+" || tok == "-" || tok == "*" || tok == "/" {
			for len(stack) > 0 {
				top := stack[len(stack)-1]
				if top == "(" {
					break
				}
				if precedence[top] >= precedence[tok] {
					output = append(output, top)
					stack = stack[:len(stack)-1]
				} else {
					break
				}
			}
			stack = append(stack, tok)
		} else if tok == "(" {
			stack = append(stack, tok)
		} else if tok == ")" {
			foundParen := false
			for len(stack) > 0 {
				top := stack[len(stack)-1]
				stack = stack[:len(stack)-1]
				if top == "(" {
					foundParen = true
					break
				}
				output = append(output, top)
			}
			if !foundParen {
				return nil, fmt.Errorf("–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∫–æ–±–æ–∫")
			}
		} else {
			return nil, fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω: %s", tok)
		}
	}

	for len(stack) > 0 {
		top := stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		if top == "(" || top == ")" {
			return nil, fmt.Errorf("–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∫–æ–±–æ–∫")
		}
		output = append(output, top)
	}

	return output, nil
}

func evalRPN(tokens []string) (float64, error) {
	var stack []float64

	for _, tok := range tokens {
		if isNumber(tok) {
			num, err := strconv.ParseFloat(tok, 64)
			if err != nil {
				return 0, err
			}
			stack = append(stack, num)
		} else {
			if len(stack) < 2 {
				return 0, fmt.Errorf("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤")
			}
			b := stack[len(stack)-1]
			a := stack[len(stack)-2]
			stack = stack[:len(stack)-2]

			switch tok {
			case "+":
				stack = append(stack, a+b)
			case "-":
				stack = append(stack, a-b)
			case "*":
				stack = append(stack, a*b)
			case "/":
				if b == 0 {
					return 0, fmt.Errorf("–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å")
				}
				stack = append(stack, a/b)
			}
		}
	}

	if len(stack) != 1 {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
	}

	return stack[0], nil
}

func isNumber(s string) bool {
	_, err := strconv.ParseFloat(s, 64)
	return err == nil
}

// ----------------- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ -----------------

func clearScreen() {
	if runtime.GOOS == "windows" {
		// –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–π –∫–æ–Ω—Å–æ–ª–∏
		cmd := exec.Command("cmd", "/c", "cls")
		cmd.Stdout = os.Stdout
		cmd.Run()
	} else {
		fmt.Print("\033[H\033[2J")
	}
}

func fileExists(file string) bool {
	_, err := os.Stat(file)
	return !os.IsNotExist(err)
}

func playMusic(file string) {
	if !fileExists(file) {
		fmt.Println("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", file)
		return
	}

	var cmd *exec.Cmd
	switch runtime.GOOS {
	case "windows":
		cmd = exec.Command("cmd", "/c", "start", "", file)
	case "darwin":
		cmd = exec.Command("open", file)
	case "linux":
		cmd = exec.Command("xdg-open", file)
	default:
		fmt.Println("–ú—É–∑—ã–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –û–°")
		return
	}

	err := cmd.Start()
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏:", err)
	}
}
